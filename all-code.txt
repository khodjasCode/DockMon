services:
  app:
    build: ./app
    container_name: flask_app
    ports:
      - "5000:5000"
    volumes:
      - ./app:/app
      - /var/run/docker.sock:/var/run/docker.sock
    
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "8080:80"
    volumes:
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    user: root  # Add this line to fix permission denied
server{
	listen 8080;

	location / {
		proxy_pass http://app:5000;
	}
}
from flask import Flask, jsonify, render_template
from docker_utils import get_containers, get_container_by_id, get_system_info

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/containers')
def containers():
    return jsonify(get_containers())

@app.route('/containers/<id>')
def container_detail(id):
    return jsonify(get_container_by_id(id))

@app.route('/stats')
def stats():
    return jsonify(get_system_info())

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "main:app"]
import docker

client = docker.from_env()

def get_containers():
    containers = client.containers.list(all=True)
    return [
        {
            "id": c.short_id,
            "name": c.name,
            "status": c.status
        } for c in containers
    ]

def get_container_by_id(container_id):
    try:
        container = client.containers.get(container_id)
        return {
            "id": container.short_id,
            "name": container.name,
            "status": container.status,
            "image": container.image.tags,
            "created": container.attrs["Created"]
        }
    except Exception as e:
        return {"error": str(e)}

def get_system_info():
    info = client.info()
    return {
        "cpu_count": info["NCPU"],
        "mem_total": round(info["MemTotal"] / 1024**3, 2),
        "docker_version": info["ServerVersion"]
    }

